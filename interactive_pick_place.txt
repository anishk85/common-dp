#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from rclpy.action import ActionClient
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from std_msgs.msg import Bool
from sensor_msgs.msg import Image, JointState
from moveit_msgs.action import MoveGroup
from moveit_msgs.msg import MotionPlanRequest, WorkspaceParameters, Constraints, JointConstraint
from moveit_msgs.srv import GetPlanningScene
from tf2_ros import Buffer, TransformListener
from cv_bridge import CvBridge
import cv2
import numpy as np
import threading
import time
import math

class InteractivePickPlaceController(Node):
    def __init__(self):
        super().__init__('interactive_pick_place_controller')
        
        # CV Bridge
        self.bridge = CvBridge()
        
        # TF2 for getting actual end effector position
        self.tf_buffer = Buffer()
        self.tf_listener = TransformListener(self.tf_buffer, self)
        
        # Publishers
        self.electromagnet_pub = self.create_publisher(Bool, '/thor_arm/electromagnet/control', 10)
        
        # MoveIt action client
        self.move_group_client = ActionClient(self, MoveGroup, '/move_action')
        
        # Service clients for MoveIt
        self.planning_scene_client = self.create_client(GetPlanningScene, '/get_planning_scene')
        
        # Subscribers
        self.image_sub = self.create_subscription(
            Image, '/camera/image_raw', self.image_callback, 10)
        
        self.joint_states_sub = self.create_subscription(
            JointState, '/joint_states', self.joint_states_callback, 10)
        
        # Initialize state variables
        self.current_image = None
        self.current_joint_states = None
        self.selected_point = None
        self.movement_in_progress = False
        self.electromagnet_active = False
        self.system_ready = False
        self.motion_sequence_active = False
        self.current_target = None
        self.sequence_failed = False
        self.last_error_code = None
        self.debug_mode = True
        
        # Robot configuration based on URDF analysis
        self.move_group_name = "arm_group"
        self.end_effector_link = "electromagnet_plate"
        
        # Corrected workspace parameters based on URDF measurements
        self.robot_base_height = 0.0  # Base at ground level
        self.table_height = 0.095 + 0.04  # Table base height + table thickness = 13.5cm total
        self.contact_height = self.table_height + 0.035  # 3.5cm above table for object pickup
        self.safe_approach_height = 0.08  # 8cm above contact
        
        # Corrected reachable workspace based on URDF arm geometry
        # Calculated from joint limits and link lengths:
        # - Max reach when fully extended: ~0.6m
        # - Min reach when folded: ~0.15m
        # - Height range: 0.1m to 0.5m (from base)
        self.workspace_bounds = {
            'x_min': 0.15, 'x_max': 0.65,   # Forward reach
            'y_min': -0.35, 'y_max': 0.35,  # Side reach (wider for joint rotation)
            'z_min': 0.10, 'z_max': 0.50    # Height reach
        }
        
        # Corrected predefined poses - now all reachable
        self.predefined_poses = {
            'home': self.create_pose(0.35, 0.0, 0.25, 0.0, 0.0, 0.0, 1.0),  # Safe home position
            
            'scan': self.create_pose(0.45, 0.0, 0.30, 0.707, 0.0, 0.0, 0.707),  # Over table, pointing down
            
            # Contact positions adjusted to be within reach
            'contact_object1': self.create_pose(0.35, 0.10, self.contact_height, 0.707, 0.0, 0.0, 0.707),
            'contact_object2': self.create_pose(0.35, -0.10, self.contact_height, 0.707, 0.0, 0.0, 0.707),
            'contact_center': self.create_pose(0.45, 0.0, self.contact_height, 0.707, 0.0, 0.0, 0.707),
        }
        
        # Initialize system
        self.create_timer(1.0, self.check_system_status)
        
        self.get_logger().info("üéØ FIXED CONTACT-PICKUP Controller")
        self.get_logger().info(f"üìè Table height: {self.table_height:.3f}m")
        self.get_logger().info(f"ü§è Contact height: {self.contact_height:.3f}m")
        self.get_logger().info(f"üè† Home position: (0.35, 0.0, 0.25) - REACHABLE!")
        self.get_logger().info(f"üìç Table position: (0.45, 0.0, {self.table_height:.3f})")
        
        # Start GUI after delay
        self.create_timer(3.0, self.start_gui_once)
    
    def create_pose(self, x, y, z, qx, qy, qz, qw):
        """Create a validated PoseStamped"""
        # Clamp to workspace bounds
        x = max(self.workspace_bounds['x_min'], min(self.workspace_bounds['x_max'], x))
        y = max(self.workspace_bounds['y_min'], min(self.workspace_bounds['y_max'], y))
        z = max(self.workspace_bounds['z_min'], min(self.workspace_bounds['z_max'], z))
        
        pose = PoseStamped()
        pose.header.frame_id = "base_link"
        pose.header.stamp = self.get_clock().now().to_msg()
        
        pose.pose.position = Point(x=x, y=y, z=z)
        pose.pose.orientation = Quaternion(x=qx, y=qy, z=qz, w=qw)
        
        if self.debug_mode:
            self.get_logger().info(f"üéØ Created pose at: ({x:.3f}, {y:.3f}, {z:.3f})")
        
        return pose
    
    def get_current_end_effector_pose(self):
        """Get current end effector pose with error handling"""
        try:
            transform = self.tf_buffer.lookup_transform(
                'base_link', self.end_effector_link, rclpy.time.Time()
            )
            
            pos = transform.transform.translation
            orient = transform.transform.rotation
            
            return (pos.x, pos.y, pos.z), (orient.x, orient.y, orient.z, orient.w)
            
        except Exception as e:
            self.get_logger().warn(f"TF lookup failed: {str(e)}")
            return None, None
    
    def start_gui_once(self):
        """Start GUI once"""
        if not hasattr(self, 'gui_started'):
            self.gui_started = True
            self.gui_thread = threading.Thread(target=self.run_gui)
            self.gui_thread.daemon = True
            self.gui_thread.start()
    
    def check_system_status(self):
        """Check system readiness"""
        image_ready = self.current_image is not None
        joints_ready = self.current_joint_states is not None
        moveit_ready = self.move_group_client.wait_for_server(timeout_sec=0.1)
        
        if not hasattr(self, '_status_counter'):
            self._status_counter = 0
            
        if self._status_counter % 10 == 0:
            self.get_logger().info(f"üìä System Status - Image: {image_ready}, Joints: {joints_ready}, MoveIt: {moveit_ready}")
            if joints_ready:
                self.log_robot_state()
        
        if image_ready and joints_ready and moveit_ready and not self.system_ready:
            self.system_ready = True
            self.get_logger().info("‚úÖ System Ready!")
    
    def log_robot_state(self):
        """Log current robot state"""
        end_pos, _ = self.get_current_end_effector_pose()
        if end_pos:
            height_above_table = (end_pos[2] - self.table_height) * 1000
            distance_to_table = math.sqrt((end_pos[0] - 0.45)**2 + end_pos[1]**2)
            self.get_logger().info(f"ü¶æ End Effector: ({end_pos[0]:.3f}, {end_pos[1]:.3f}, {end_pos[2]:.3f})")
            self.get_logger().info(f"üìè {height_above_table:.0f}mm above table | {distance_to_table:.3f}m from table center")
    
    def image_callback(self, msg):
        """Store image"""
        try:
            self.current_image = self.bridge.imgmsg_to_cv2(msg, "bgr8")
        except Exception as e:
            self.get_logger().error(f"‚ùå Image error: {e}")
    
    def joint_states_callback(self, msg):
        """Store joint states"""
        self.current_joint_states = msg
    
    def pixel_to_world_coordinates(self, pixel_x, pixel_y):
        """Map pixels to table coordinates"""
        if self.current_image is None:
            return None
        
        img_height, img_width = self.current_image.shape[:2]
        
        # Normalize pixel coordinates
        norm_x = pixel_x / img_width
        norm_y = pixel_y / img_height
        
        # Map to table area (adjusted for camera perspective)
        table_center_x = 0.45  # Table is at 0.45 in X (not 0.5)
        table_center_y = 0.0
        table_width = 0.35   # 35cm wide reachable area
        table_depth = 0.3    # 30cm deep reachable area
        
        world_x = table_center_x - table_depth/2 + norm_y * table_depth
        world_y = table_center_y - table_width/2 + norm_x * table_width
        world_z = self.contact_height
        
        # Validate against workspace
        world_x = max(self.workspace_bounds['x_min'], min(self.workspace_bounds['x_max'], world_x))
        world_y = max(self.workspace_bounds['y_min'], min(self.workspace_bounds['y_max'], world_y))
        
        if self.debug_mode:
            self.get_logger().info(f"üåç Pixel ({pixel_x},{pixel_y}) ‚Üí World ({world_x:.3f},{world_y:.3f},{world_z:.3f})")
        
        return (world_x, world_y, world_z)
    
    def create_approach_pose(self, target_pos):
        """Create approach pose above target"""
        x, y, z = target_pos
        approach_z = z + self.safe_approach_height
        
        return self.create_pose(x, y, approach_z, 0.707, 0.0, 0.0, 0.707)
    
    def create_contact_pose(self, target_pos):
        """Create contact pose at target"""
        x, y, z = target_pos
        return self.create_pose(x, y, z, 0.707, 0.0, 0.0, 0.707)
    
    def move_to_pose(self, target_pose, move_type="MOVE"):
        """Execute MoveIt motion with improved planning parameters"""
        if self.movement_in_progress:
            self.get_logger().warn(f"‚ö†Ô∏è Motion in progress: {move_type}")
            return False
        
        self.movement_in_progress = True
        self.last_error_code = None
        
        pos = target_pose.pose.position
        self.get_logger().info(f"üéØ Moving to: ({pos.x:.3f}, {pos.y:.3f}, {pos.z:.3f}) for {move_type}")
        
        # Validate pose
        if not self.validate_pose(pos):
            self.movement_in_progress = False
            return False
        
        try:
            if not self.move_group_client.wait_for_server(timeout_sec=2.0):
                self.get_logger().error("‚ùå MoveIt server unavailable")
                self.movement_in_progress = False
                self.last_error_code = -998
                return False
            
            # Create motion plan request with relaxed constraints
            goal = MoveGroup.Goal()
            goal.request.group_name = self.move_group_name
            goal.request.num_planning_attempts = 30  # More attempts
            goal.request.allowed_planning_time = 20.0  # More time
            goal.request.max_velocity_scaling_factor = 0.2  # Slower for accuracy
            goal.request.max_acceleration_scaling_factor = 0.2
            
            # Set workspace parameters
            ws = WorkspaceParameters()
            ws.header.frame_id = "base_link"
            ws.min_corner.x = self.workspace_bounds['x_min']
            ws.min_corner.y = self.workspace_bounds['y_min']
            ws.min_corner.z = self.workspace_bounds['z_min']
            ws.max_corner.x = self.workspace_bounds['x_max']
            ws.max_corner.y = self.workspace_bounds['y_max']
            ws.max_corner.z = self.workspace_bounds['z_max']
            goal.request.workspace_parameters = ws
            
            # Set position constraints (more relaxed)
            from moveit_msgs.msg import PositionConstraint, OrientationConstraint
            from shape_msgs.msg import SolidPrimitive
            
            pos_constraint = PositionConstraint()
            pos_constraint.header.frame_id = "base_link"
            pos_constraint.link_name = self.end_effector_link
            pos_constraint.constraint_region.primitives = [SolidPrimitive()]
            pos_constraint.constraint_region.primitives[0].type = SolidPrimitive.SPHERE
            pos_constraint.constraint_region.primitives[0].dimensions = [0.05]  # 5cm tolerance sphere
            pos_constraint.constraint_region.primitive_poses = [target_pose.pose]
            pos_constraint.weight = 0.5  # Lower weight for more flexibility
            
            # Orientation constraint (more relaxed)
            orient_constraint = OrientationConstraint()
            orient_constraint.header.frame_id = "base_link"
            orient_constraint.link_name = self.end_effector_link
            orient_constraint.orientation = target_pose.pose.orientation
            orient_constraint.absolute_x_axis_tolerance = 0.5  # ~30 degrees
            orient_constraint.absolute_y_axis_tolerance = 0.5
            orient_constraint.absolute_z_axis_tolerance = 0.5
            orient_constraint.weight = 0.3  # Lower priority
            
            goal.request.goal_constraints = [Constraints()]
            goal.request.goal_constraints[0].position_constraints = [pos_constraint]
            goal.request.goal_constraints[0].orientation_constraints = [orient_constraint]
            
            # Send goal
            future = self.move_group_client.send_goal_async(goal)
            
            def goal_response_callback(future_result):
                try:
                    goal_handle = future_result.result()
                    if not goal_handle.accepted:
                        self.get_logger().error(f"‚ùå Goal rejected for {move_type}")
                        self.movement_in_progress = False
                        self.last_error_code = -997
                        return
                    
                    self.get_logger().info(f"‚úÖ Goal accepted for {move_type}")
                    result_future = goal_handle.get_result_async()
                    result_future.add_done_callback(lambda f: self.result_callback(f, move_type, target_pose))
                    
                except Exception as e:
                    self.get_logger().error(f"‚ùå Goal callback error: {e}")
                    self.movement_in_progress = False
                    self.last_error_code = -996
            
            future.add_done_callback(goal_response_callback)
            return True
            
        except Exception as e:
            self.get_logger().error(f"‚ùå MoveIt error: {e}")
            self.movement_in_progress = False
            self.last_error_code = -995
            return False
    
    def validate_pose(self, position):
        """Validate pose is within reachable workspace"""
        x, y, z = position.x, position.y, position.z
        
        if not (self.workspace_bounds['x_min'] <= x <= self.workspace_bounds['x_max']):
            self.get_logger().error(f"‚ùå X out of bounds: {x:.3f} not in [{self.workspace_bounds['x_min']:.3f}, {self.workspace_bounds['x_max']:.3f}]")
            return False
        if not (self.workspace_bounds['y_min'] <= y <= self.workspace_bounds['y_max']):
            self.get_logger().error(f"‚ùå Y out of bounds: {y:.3f} not in [{self.workspace_bounds['y_min']:.3f}, {self.workspace_bounds['y_max']:.3f}]")
            return False
        if not (self.workspace_bounds['z_min'] <= z <= self.workspace_bounds['z_max']):
            self.get_logger().error(f"‚ùå Z out of bounds: {z:.3f} not in [{self.workspace_bounds['z_min']:.3f}, {self.workspace_bounds['z_max']:.3f}]")
            return False
        
        return True
    
    def result_callback(self, future, move_type, target_pose):
        """Handle MoveIt result"""
        try:
            result = future.result()
            error_code = getattr(result.result.error_code, 'val', 1)
            self.last_error_code = error_code
                
            if error_code == 1:  # SUCCESS
                self.get_logger().info(f"‚úÖ Success: {move_type}")
                
                # Verify final position
                final_pos, _ = self.get_current_end_effector_pose()
                if final_pos:
                    target_pos = target_pose.pose.position
                    error = math.sqrt((final_pos[0]-target_pos.x)**2 + 
                                    (final_pos[1]-target_pos.y)**2 + 
                                    (final_pos[2]-target_pos.z)**2)
                    self.get_logger().info(f"üéØ Position error: {error*1000:.1f}mm")
            else:
                self.get_logger().error(f"‚ùå Failed: {move_type} - Error {error_code}")
                self.sequence_failed = True
                
        except Exception as e:
            self.get_logger().error(f"‚ùå Result callback error: {e}")
            self.last_error_code = -994
            self.sequence_failed = True
        finally:
            self.movement_in_progress = False
    
    def run_gui(self):
        """GUI interface"""
        window_name = 'Thor Controller'
        cv2.namedWindow(window_name, cv2.WINDOW_NORMAL)
        cv2.resizeWindow(window_name, 800, 600)
        cv2.setMouseCallback(window_name, self.mouse_callback)
        
        while True:
            if self.current_image is not None:
                display_image = self.current_image.copy()
                
                # Add status overlay
                status_color = (0, 255, 0) if self.system_ready else (0, 0, 255)
                cv2.putText(display_image, f"Status: {'READY' if self.system_ready else 'INIT'}",
                           (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, status_color, 2)
                
                # Add current position
                end_pos, _ = self.get_current_end_effector_pose()
                if end_pos:
                    cv2.putText(display_image, f"Position: ({end_pos[0]:.2f}, {end_pos[1]:.2f}, {end_pos[2]:.2f})",
                               (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 0), 1)
                
                # Add instructions
                instructions = [
                    "Controls:",
                    "h: Home | s: Scan | 1/2: Objects | 3: Center",
                    "p: Demo Pickup | m: Toggle Magnet | q: Quit",
                    "Click on image to pick location"
                ]
                
                for i, text in enumerate(instructions):
                    cv2.putText(display_image, text, (10, 90 + i*20),
                               cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 255, 255), 1)
                
                cv2.imshow(window_name, display_image)
                
                key = cv2.waitKey(30) & 0xFF
                if key == ord('q'):
                    break
                elif self.system_ready and not self.movement_in_progress:
                    self.handle_keyboard(key)
            else:
                # Show waiting screen
                waiting_img = np.zeros((300, 500, 3), dtype=np.uint8)
                cv2.putText(waiting_img, "Waiting for camera...", 
                           (150, 150), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)
                cv2.imshow(window_name, waiting_img)
                cv2.waitKey(100)
        
        cv2.destroyAllWindows()
    
    def handle_keyboard(self, key):
        """Handle keyboard input"""
        if key == ord('h'):
            self.move_to_pose(self.predefined_poses['home'], "HOME")
        elif key == ord('s'):
            self.move_to_pose(self.predefined_poses['scan'], "SCAN")
        elif key == ord('1'):
            self.move_to_pose(self.predefined_poses['contact_object1'], "OBJECT1")
        elif key == ord('2'):
            self.move_to_pose(self.predefined_poses['contact_object2'], "OBJECT2")
        elif key == ord('3'):
            self.move_to_pose(self.predefined_poses['contact_center'], "CENTER")
        elif key == ord('m'):
            self.toggle_electromagnet()
        elif key == ord('p'):
            self.run_demo_pickup()
    
    def mouse_callback(self, event, x, y, flags, param):
        """Handle mouse clicks for target selection"""
        if event == cv2.EVENT_LBUTTONDOWN and self.system_ready:
            self.selected_point = (x, y)
            world_pos = self.pixel_to_world_coordinates(x, y)
            if world_pos:
                self.start_pickup_sequence(world_pos)
    
    def start_pickup_sequence(self, target_pos):
        """Execute pickup sequence"""
        if self.motion_sequence_active:
            return
            
        self.motion_sequence_active = True
        self.sequence_failed = False
        
        def sequence_thread():
            try:
                # Step 1: Home
                self.get_logger().info("üè† Step 1: Going home")
                if not self.move_to_pose(self.predefined_poses['home'], "HOME"):
                    raise Exception("Home failed")
                self.wait_for_completion()
                if self.check_error():
                    raise Exception("Home error")
                
                # Step 2: Approach
                approach_pose = self.create_approach_pose(target_pos)
                self.get_logger().info("‚¨ÜÔ∏è Step 2: Approaching")
                if not self.move_to_pose(approach_pose, "APPROACH"):
                    raise Exception("Approach failed")
                self.wait_for_completion()
                if self.check_error():
                    raise Exception("Approach error")
                
                # Step 3: Contact
                contact_pose = self.create_contact_pose(target_pos)
                self.get_logger().info("ü§è Step 3: Contacting")
                if not self.move_to_pose(contact_pose, "CONTACT"):
                    raise Exception("Contact failed")
                self.wait_for_completion()
                if self.check_error():
                    raise Exception("Contact error")
                
                # Step 4: Activate magnet
                self.get_logger().info("üß≤ Step 4: Activating magnet")
                self.activate_electromagnet()
                time.sleep(2.0)
                
                # Step 5: Lift
                self.get_logger().info("‚¨ÜÔ∏è Step 5: Lifting")
                if not self.move_to_pose(approach_pose, "LIFT"):
                    raise Exception("Lift failed")
                self.wait_for_completion()
                if self.check_error():
                    raise Exception("Lift error")
                
                # Step 6: Return home
                self.get_logger().info("üè† Step 6: Returning home")
                if not self.move_to_pose(self.predefined_poses['home'], "RETURN"):
                    raise Exception("Return failed")
                self.wait_for_completion()
                
                # Step 7: Release
                self.get_logger().info("‚ö´ Step 7: Releasing")
                self.deactivate_electromagnet()
                self.get_logger().info("‚úÖ Pickup completed!")
                
            except Exception as e:
                self.get_logger().error(f"‚ùå Sequence failed: {e}")
                self.sequence_failed = True
                self.emergency_cleanup()
            finally:
                self.motion_sequence_active = False
        
        thread = threading.Thread(target=sequence_thread)
        thread.daemon = True
        thread.start()
    
    def run_demo_pickup(self):
        """Run demo pickup sequence"""
        demo_pos = (0.45, 0.0, self.contact_height)
        self.start_pickup_sequence(demo_pos)
    
    def wait_for_completion(self):
        """Wait for motion to complete"""
        while self.movement_in_progress:
            time.sleep(0.1)
    
    def check_error(self):
        """Check if last motion had error"""
        return self.last_error_code is not None and self.last_error_code != 1
    
    def emergency_cleanup(self):
        """Emergency cleanup"""
        try:
            self.deactivate_electromagnet()
            self.move_to_pose(self.predefined_poses['home'], "EMERGENCY")
        except:
            pass
    
    def activate_electromagnet(self):
        """Activate electromagnet"""
        self.electromagnet_active = True
        msg = Bool(data=True)
        self.electromagnet_pub.publish(msg)
        self.get_logger().info("üß≤ Magnet ON")
    
    def deactivate_electromagnet(self):
        """Deactivate electromagnet"""
        self.electromagnet_active = False
        msg = Bool(data=False)
        self.electromagnet_pub.publish(msg)
        self.get_logger().info("‚ö´ Magnet OFF")
    
    def toggle_electromagnet(self):
        """Toggle electromagnet"""
        if self.electromagnet_active:
            self.deactivate_electromagnet()
        else:
            self.activate_electromagnet()

def main(args=None):
    rclpy.init(args=args)
    node = InteractivePickPlaceController()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()